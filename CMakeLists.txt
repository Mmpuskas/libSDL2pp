PROJECT(libSDL2pp)

# meta
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

SET(SDL2PP_MAJOR_VERSION 0)
SET(SDL2PP_MINOR_VERSION 16)
SET(SDL2PP_PATCH_VERSION 0)

SET(SDL2PP_VERSION "${SDL2PP_MAJOR_VERSION}.${SDL2PP_MINOR_VERSION}.${SDL2PP_PATCH_VERSION}")

# there are functions present on wiki, but not yet in stable SDL2 releases;
# we hide these under following options
OPTION(SDL2PP_WITH_WERROR "Make warnings fatal" OFF)

SET(SDL2PP_CXXSTD "c++11" CACHE STRING "Used c++ standard")

IF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	OPTION(SDL2PP_WITH_IMAGE "Enable SDL2_image support" ON)
	OPTION(SDL2PP_WITH_TTF "Enable SDL2_ttf support" ON)
	OPTION(SDL2PP_WITH_MIXER "Enable SDL2_mixer support" ON)
	OPTION(SDL2PP_WITH_NET "Enable SDL_net support" ON)
ELSE(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)
	# please set SDL2PP_WITH_IMAGE, SDL2PP_WITH_TTF, SDL2PP_WITH_MIXER, SDL2PP_WITH_NET in parent project as needed
ENDIF(CMAKE_SOURCE_DIR STREQUAL PROJECT_SOURCE_DIR)

# depends
SET(SDL2_ALL_INCLUDE_DIRS ${SDL2_INCLUDE_DIR})
SET(SDL2_ALL_LIBRARIES ${SDL2_LIBRARY})
SET(SDL2_ALL_PKGCONFIG_MODULES sdl2)
SET(SDL2PP_EXTRA_LIBRARIES ${SDL2MAIN_LIBRARY})
SET(SDL2PP_EXTRA_PKGCONFIG_LIBRARIES ${SDL2MAIN_LIBRARY})

IF(MINGW)
	SET(MINGW32_LIBRARY "mingw32" CACHE STRING "mingw32 library")
	SET(SDL2PP_EXTRA_LIBRARIES ${MINGW32_LIBRARY} ${SDL2PP_EXTRA_LIBRARIES})
	SET(SDL2PP_EXTRA_PKGCONFIG_LIBRARIES "-l${MINGW32_LIBRARY} ${SDL2PP_EXTRA_PKGCONFIG_LIBRARIES}")
ENDIF(MINGW)

# compiler flags & definitions
IF(MSVC)
	SET(SDL2PP_WARNINGS "${SDL2PP_WARNINGS} /W3")
	SET(SDL2PP_WERROR_FLAG "/WX")
ELSE(MSVC)
	SET(CMAKE_CXX_FLAGS_COVERAGE "${CMAKE_CXX_FLAGS_DEBUG} --coverage")
	SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE "${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage")
	SET(CMAKE_SHARED_LINKER_FLAGS_COVERAGE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} --coverage")

	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=${SDL2PP_CXXSTD}")
	SET(SDL2PP_WARNINGS "${SDL2PP_WARNINGS} -Wall -Wextra -pedantic")
	SET(SDL2PP_WERROR_FLAG "-Werror")

	INCLUDE(AppendCXXFlagIfSupported)

	# enable for more cleanups
	#APPEND_CXX_FLAG_IF_SUPPORTED(-Weverything SDL2PP_WARNINGS)

	# always enables some -Weverything warnings
	APPEND_CXX_FLAG_IF_SUPPORTED(-Wmissing-prototypes SDL2PP_WARNINGS)
	APPEND_CXX_FLAG_IF_SUPPORTED(-Wtautological-compare SDL2PP_WARNINGS)
	APPEND_CXX_FLAG_IF_SUPPORTED(-Wshorten-64-to-32 SDL2PP_WARNINGS)

	# disable some -Weverything warnings
	#APPEND_CXX_FLAG_IF_SUPPORTED(-Wno-c++98-compat SDL2PP_WARNINGS)
	#APPEND_CXX_FLAG_IF_SUPPORTED(-Wno-padded SDL2PP_WARNINGS)
ENDIF(MSVC)

INCLUDE(CheckCompile)
CHECK_COMPILE(
	SDL2PP_WITH_EXPERIMENTAL_OPTIONAL
	"#include <experimental/optional>\nint main() { std::experimental::optional<int> o; return !o; }"
	"experimental/optional header"
)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SDL2PP_WARNINGS}")

IF(SDL2PP_WITH_WERROR)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SDL2PP_WERROR_FLAG}")
ENDIF(SDL2PP_WITH_WERROR)

# config.h
CONFIGURE_FILE(
	SDL2pp/Config.hh.in
	SDL2pp/Config.hh
)

# sources
SET(LIBRARY_SOURCES
	SDL2pp/AudioDevice.cc
	SDL2pp/AudioLock.cc
	SDL2pp/AudioSpec.cc
	SDL2pp/Color.cc
	SDL2pp/Exception.cc
	SDL2pp/Point.cc
	SDL2pp/RWops.cc
	SDL2pp/Rect.cc
	SDL2pp/Renderer.cc
	SDL2pp/SDL.cc
	SDL2pp/Surface.cc
	SDL2pp/SurfaceLock.cc
	SDL2pp/Texture.cc
	SDL2pp/TextureLock.cc
	SDL2pp/Wav.cc
	SDL2pp/Window.cc
)

SET(LIBRARY_HEADERS
	SDL2pp/AudioDevice.hh
	SDL2pp/AudioSpec.hh
	SDL2pp/Color.hh
	SDL2pp/ContainerRWops.hh
	SDL2pp/Exception.hh
	SDL2pp/Optional.hh
	SDL2pp/Point.hh
	SDL2pp/RWops.hh
	SDL2pp/Rect.hh
	SDL2pp/Renderer.hh
	SDL2pp/SDL.hh
	SDL2pp/SDL2pp.hh
	SDL2pp/StreamRWops.hh
	SDL2pp/Surface.hh
	SDL2pp/Texture.hh
	SDL2pp/Wav.hh
	SDL2pp/Window.hh
)

SET(LIBRARY_EXTERNAL_HEADERS
	SDL2pp/external/libcpp_optional.hh
)

# optional sources
IF(SDL2PP_WITH_TTF)
	SET(LIBRARY_SOURCES
		${LIBRARY_SOURCES}
		SDL2pp/SDLTTF.cc
		SDL2pp/Font.cc
	)
	SET(LIBRARY_HEADERS
		${LIBRARY_HEADERS}
		SDL2pp/SDLTTF.hh
		SDL2pp/Font.hh
	)
ENDIF(SDL2PP_WITH_TTF)

IF(SDL2PP_WITH_IMAGE)
	SET(LIBRARY_SOURCES
		${LIBRARY_SOURCES}
		SDL2pp/SDLImage.cc
	)
	SET(LIBRARY_HEADERS
		${LIBRARY_HEADERS}
		SDL2pp/SDLImage.hh
	)
ENDIF(SDL2PP_WITH_IMAGE)

IF(SDL2PP_WITH_MIXER)
	SET(LIBRARY_SOURCES
		${LIBRARY_SOURCES}
		SDL2pp/Chunk.cc
		SDL2pp/Mixer.cc
		SDL2pp/Music.cc
		SDL2pp/SDLMixer.cc
	)
	SET(LIBRARY_HEADERS
		${LIBRARY_HEADERS}
		SDL2pp/Chunk.hh
		SDL2pp/Mixer.hh
		SDL2pp/Music.hh
		SDL2pp/SDLMixer.hh
	)
ENDIF(SDL2PP_WITH_MIXER)

# targets
INCLUDE(GenerateExportHeader)

# Build SDL2pp as static lib.
ADD_LIBRARY(SDL2pp STATIC ${LIBRARY_SOURCES} ${LIBRARY_HEADERS})
GENERATE_EXPORT_HEADER(SDL2pp EXPORT_FILE_NAME SDL2pp/Export.hh)

target_include_directories(SDL2pp
    PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR} 
        # Used for including the generated export and config files.
        ${CMAKE_CURRENT_BINARY_DIR} 
)

target_link_libraries(SDL2pp
    PUBLIC
        ${SDL2PP_EXTRA_LIBRARIES}
        SDL2-static
)

IF(SDL2PP_WITH_IMAGE)
	target_link_libraries(SDL2pp PUBLIC SDL2_image-static)
ELSE(SDL2PP_WITH_IMAGE)
	MESSAGE(STATUS "SDL2_image support disabled")
ENDIF(SDL2PP_WITH_IMAGE)

IF(SDL2PP_WITH_TTF)
	target_link_libraries(SDL2pp PUBLIC SDL2_ttf-static)
ELSE(SDL2PP_WITH_TTF)
	MESSAGE(STATUS "SDL2_ttf support disabled")
ENDIF(SDL2PP_WITH_TTF)

IF(SDL2PP_WITH_MIXER)
	target_link_libraries(SDL2pp PUBLIC SDL2_mixer-static)
ELSE(SDL2PP_WITH_MIXER)
	MESSAGE(STATUS "SDL2_mixer support disabled")
ENDIF(SDL2PP_WITH_MIXER)

IF(SDL2PP_WITH_NET)
	target_link_libraries(SDL2pp PUBLIC SDL2_net-static)
ELSE(SDL2PP_WITH_NET)
	MESSAGE(STATUS "SDL2_net support disabled")
ENDIF(SDL2PP_WITH_NET)

MESSAGE(STATUS "libSDL2pp ${SDL2PP_VERSION} bundled build")
